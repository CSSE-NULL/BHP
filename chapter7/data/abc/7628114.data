{'TMP': 'C:\\Users\\windows\\AppData\\Local\\Temp', 'COMPUTERNAME': 'ACER', 'VS110COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\\', 'USERDOMAIN': 'ACER', 'PSMODULEPATH': 'C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 60 Stepping 3, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3c03', 'PATH': 'C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Java\\jdk1.8.0_101\\\\bin;C:\\Program Files (x86)\\Java\\jdk1.8.0_101\\\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Git\\cmd;D:\\\xa3\xbbC:\\Program Files(x86)\\Git\\bin;C:\\Program Files(x86)\\Git\\libexec\\git-core;C:\\Python27;C:\\Python27\\Scripts;C:\\Program Files\\nodejs\\;C:\\Users\\windows\\AppData\\Roaming\\npm;C:\\Program Files\\MYSQL\\MySQL Server 5.7\\bin', 'SYSTEMROOT': 'C:\\WINDOWS', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', '#ENVKKPRBC_CMDILNE': '', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', '#ENVTSLOGXMEDIALIBRARY33492': '9385856', 'TEMP': 'C:\\Users\\windows\\AppData\\Local\\Temp', '#ENVTSLOGRBCSHELLEXT33492': '88931344', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', '#ENVTSLOGSHELLEXT33492': '9382656', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'SHELLLAUNCH{A81BA54B-CCFE-4204-8E79-A68C0FDFA5CF}': 'ShellExt', 'LOCALAPPDATA': 'C:\\Users\\windows\\AppData\\Local', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEPATH': '\\Users\\windows', 'USERDOMAIN_ROAMINGPROFILE': 'ACER', 'JAVA_HOME': 'C:\\Program Files (x86)\\Java\\jdk1.8.0_101\\', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'windows', 'LOGONSERVER': '\\\\MicrosoftAccount', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'CLASSPATH': '.;C:\\Program Files (x86)\\Java\\jdk1.8.0_101\\\\lib\\dt.jar;C:\\Program Files (x86)\\Java\\jdk1.8.0_101\\\\lib\\tools.jar;D:\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar', 'ONEDRIVE': 'C:\\Users\\windows\\OneDrive', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\WINDOWS', 'APPDATA': 'C:\\Users\\windows\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '4', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\windows'}